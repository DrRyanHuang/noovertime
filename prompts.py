UESR_INTENTION_ANALYSIS_PROMPT = dict(content="""""")


FINETINE_DATA_GENERATOR_PROMPT = dict(
    content="""
在工具匹配过程中, 用户query和工具描述存在匹配关系, 请你根据以下示例, 和给定的输入生成出{data_num}条数据

【示例】
【工具描述】
{demo_tool_desc}

【用户query】
{demo_user_query}

【给定工具描述】
{input_tool_desc}

请按照字符串列表的形式返回所生成的用户query, 如"[str, str, str]"
""".strip()
)

INTENT_DISASSEMBLE_PROMPT = dict(
    content="""
你是一名严格的任务分析工程师，现在需要对用户提出的问题进行解析，要求将用户的一系列问题拆分为独立的子问题：

**拆分问题要求**
1、原始<用户问题>中每个问题都需要包含在<拆分问题列表>列表中。
2、拆分出的问题必须具备逻辑性，需要根据<可能使用的工具的描述>进行调整。
3、问题需要补全各个要素，不允许含有代词或者省略词（例如这个），需要根据原始<用户问题>补全。

**问题解析要求**
1、将沿途过路费需要解析为乘车去某地的最低票价
2、自驾去XX解析为乘坐汽车去XX
3、用户意图中如果有限行相关的问题，city参数必须解析为城市；北京、武汉和成都日期解析为星期几的形式，如星期一；天津解析为日期，如2024年9月1日，严格执行！

**样例输入-1**
<用户问题>：
我计划2024年9月去青岛旅游，想了解八大关景点的门票价格和开放时间，再帮我找一家最便宜的饺子馆的名字。
<可能使用的工具的描述>：
无

**样例输出-1**
<拆分问题列表>：
[2024年9月青岛的八大关景点的门票价格和开放时间。]
[2024年9月青岛的最便宜的饺子馆的名字。]

**样例输入-2**
<用户问题>：
我想知道腾讯股票的代码是多少，百度呢？
<可能使用的工具的描述>：
1. 用户查询指定公司或者股票的财报信息。需要指定公司名称、股票名称或股票代码，返回该公司或者股票的财报信息，包含总营收、净利润、净利润率等财报数据。示例：百度财报、茅台财报、格力财报、小米财报

**样例输出-2**
<拆分问题列表>：
[腾讯股票的代码]
[百度股票的代码]


**样例输入-3**
<用户问题>：
2024年9月10号从上海自驾开车去苏州，最短多长时间，沿途过路费最少多少钱？当天苏州的最高温度如何？苏州当天的限行尾号是多少？北京当天的限行尾号是多少？
<可能使用的工具的描述>：
1. 获取火车(火车/高铁/城际/动车)、飞机、汽车的最短耗时和最低票价，如不可直达则返回中转信息
2. 获取某一时间段温度状况，入参是地点和时间段，返回该地在这一时间段的温度
3. 获取特定日期车辆限行尾号，入参是日期（如：周五、9月14日）、城市/县区（北京市、深圳、海淀区）

**样例输出-3**
<拆分问题列表>
[2024年9月10号从上海乘坐汽车去苏州的最短耗时]
[2024年9月10号从上海乘坐汽车去苏州的最低票价（也就是开车沿途过路费）]
[2024年9月10号苏州的最高温度]
[9月10号苏州的限行尾号]
[星期二北京的限行尾号]

**现在输入**
<用户问题>：
{input_query}
<可能使用的工具的描述>：
{need_description_list}

**拆分问题限制**
1、生成的<拆分问题列表>需要严格基于<用户问题>的内容，并确保拆分出的问题不超出<用户问题>的原始意图和范畴。
2、<拆分问题列表>中的问题需要齐全。
3、<拆分问题列表>中的问题需要与给定的<可能使用的工具的描述>匹配。
4、<拆分问题列表>中的问题需要将沿途过路费解析为乘车去某地的最低票价，严格执行！
5、<拆分问题列表>中的问题需要将自驾去某地解析为乘车去某地，严格执行！
6、<拆分问题列表>中如果有限行相关的问题，city参数必须解析为城市，北京、武汉和成都日期解析为星期几的形式，如星期一，天津解析为日期，如2024年9月1日，严格执行！

**限制**
1、不能额外生成未见过的问题。

请仿照样例，严格遵照要求和限制，分析<用户问题>，（用户问题是：{input_query}, 可能使用的工具的描述是: {need_description_list}），生成简洁通顺，符合逻辑性的<拆分问题列表>
""".strip()
)


CREATE_DATASET_PROMPT = dict(
    content="""
你是一名数据工程师，现在需要根据需求来构造问题，要求构造的问题有逻辑性，符合需求：
样例输入
<需求>：
1、用户输入一个包含城市起点、城市终点的query，帮助用户获取相关路线
2、查询任意城市之间的出行攻略
3、获取某一时间段温度状况，入参是地点和时间段，返回该地在这一时间段的温度

样例输出
<问题>：
2024年9月10号从上海开车去苏州，最短多长时间，沿途过路费最少多少钱？当天苏州的最高温度如何？

现在输入
<需求>：
{api_}

要求
1、生成的<问题>需要在给定的<需求>范围内，不可以延伸出其他的问题
2、在需求的范围内可以尽量输出多样化的问题。

限制
1、生成的<问题>需要符合普通人的说话规范。
2、生成的<问题>需要有逻辑性，不能简单拼接

请仿照样例，严格遵照要求和限制，在<需求>范围内，生成简洁通顺，符合逻辑性的<问题>：
""".strip()
)

COMBINE_SUBQUERY_ANSWER_PROMPT = dict(
    content="""
你是一名非常严格的文案编辑整合师，需要在一堆资料中整合出指定问题的答案，目前已经将指定问题拆分成了若干个子问题，并拥有了每个子问题的回答，请你根据以下示例，整合出指定问题的答案

**要求**
1、如果回答中有不知道的内容，你可以凭借你的常识和经验来回答，但不能直接回答不知道，但务必简洁！
2、作出的回答不能包含重复性的内容。
3、作出的回答中忽略不确定性的词语表达，比如“可能”、“不确定”等表达，如果提供的输入中含有，请将这些表达转化为确定性表达。
4、一个问题只需要整理出一种答案，不要提供多种答案。
5、作出的回答中不允许出现 "数据仅供参考"、"建议查询XXX"、"建议使用XXX查询"、"注意XX实际XX有所变动"、"请注意以上信息仅供参考"等建议性的意见性表达。
6、与限行相关的内容，上海、苏州、杭州、深圳和广州等地直接为不限行

**需要注意的内容**
汽车的最低票价就是沿途过路费，要注意保留该数值信息

**样例输入**
<原始问题>：
2024年9月10号从上海开车去苏州，最短多长时间，沿途过路费最少多少钱？当天苏州的最高温度如何？

<拆分子问题列表>：
1. 2024年9月10号从上海开车去苏州的最短耗时
2. 2024年9月10号从上海开车去苏州沿途最少过路费
3. 2024年9月10号苏州的最高温度

<子问题回答列表>：
1. 根据您提供的信息，2024年9月10号从上海开车去苏州的最短耗时为1时30分。但是请注意，我获取的信息是10月7日的数据，因为当前时间可能无法查询到未来具体某一天的实时交通信息。所以，这个耗时仅供参考，实际耗时可能会因为路况等因素有所不同。如果您需要更准确的信息，建议您使用实时交通查询工具或咨询当地交通部门。
2. 经过查询，2024年9月10号从上海开车去苏州的沿途最少过路费信息无法直接给出，因为'ticket_info_query'工具主要提供的是最短耗时和最低票价信息。根据您提供的信息，从上海到苏州的汽车直达行程大约需要1时30分，最低票价为45元。但关于过路费，建议您使用导航软件或查询相关收费站的收费标准来获取更准确的信息。
3. 根据查询，2024年9月10号苏州的最高温度为35度。该数据仅供参考，如需了解更多信息，请查询当地气象部门发布的数据。

**样例回答**
2024年9月10号从上海开车去苏州，最短时间为1小时30分钟，沿途过路费最少为45元。当天苏州的最高温度为35°C。

**现在输入**
<原始问题>：
{origin_query}

<拆分子问题列表>：
{sub_querys}

<子问题回答列表>：
{answers}

务必严格遵守所有的**要求**，不允许出现重复、矛盾和"数据仅供参考"、"建议查询XXX"等建议性表达，用简洁逻辑清晰地根据上述要求和示例回答问题（{origin_query}）：
""".strip()
)


ADJUST_ANSWER_PROMPT = dict(
    content="""
回答中有以下需要注意的点：
1. 回答中的 min_price 可能就是最少过路费
""".strip()
)

API_DESCRIPTION_PROMPT = dict(
    content="""
你正在回答一个问题，现在有多个可用的工具可以供你调用，你需要选出一个或多个工具用来回答这个问题：
##要求##
只能使用提供的工具来完成调用

##回答格式##
返回的回答是一个python的dict格式，需要组成工具接口接受的格式。
{"name": "", "required": "", "reason": ""}

##提供一个样例##
--样例输入-1--
<问题>
“五十弦翻塞外声”的后半句是什么？

<可用工具>
{"name": "get_hy_poem", "description": "查询某一首诗词的原文、赏析、翻译、注释和拼音等信息；或古诗词的作者、意思、上下句等问题的答案；或给定作者、朝代、年级等信息，查询满足条件的诗词", "parameters": {"type": "object", "properties": {"query": {"type": "string", "description": "诗词名或诗词相关信息"}, "required": ["query"]}, "paths": "/plugins?id=20"}
{"name": "get_hy_poemline_general", "description": "给定限定条件，查询满足条件的诗句", "parameters": {"type": "object", "properties": {"query": {"type": "string", "description": "诗句描述"}, "required": ["query"]}, "paths": "/plugins?id=21"}

--样例输出-1--
{"name": "get_hy_poem", "required"：{"query": "五十弦翻塞外声"}, "reason": "用户想查询”五十弦翻塞外声“这个诗句的后半句，我可以使用get_hy_poem这个工具来获取整个诗句的信息"}

##现在输入##
<问题>
{origin_query}

<可用工具>
{api_list}

##限制##
1、只能使用<可用工具>列表中的工具
2、输出必须是python中的dict格式，并且格式需要按照<可用工具>中列出工具需要的格式
3、输出的工具调用格式中"required"字段必须要严格按照<可用工具>需要的字段和字段应填入的描述进行填充。不要额外加入任何描述。
4、在"reason"字段中给出预备调用什么工具，以及这个工具的原因，格式“用户想知道XX问题，我将使用XX工具等”

现在请在遵循要求和限制的基础上，仔细分析<可用工具>中的工具功能，有逻辑地输出对问题：{origin_query}的工具调用说明：
""".strip()
)

TIME_ADJUEST_PROMPT = dict(
    content="""
**时间调整**
参考资料中返回的日期和时间可能与问题中的时间有出入，忽略时间的不一致，直接根据参考资料信息回答该问题。
例如：当询问时间为2024年9月10号的车票时，参考资料中返回的日期为2024年10月19号，可以认为2024年10月19号的车票与2024年9月10号的车票完全一致。
""".strip()
)
